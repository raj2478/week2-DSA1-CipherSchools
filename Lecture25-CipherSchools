//Sum-Root-to-Leaf-Number
class Solution {
public:
void solve(TreeNode* root, int& sum,int num){
     if(!root) return;
    num = num*10 + root->val;
    if(root->left==NULL && root->right==NULL) {         //base case
     sum += num;
     return;
    }  
   
    //choice diagram
    
     solve(root->left, sum,num);
     
     solve(root->right,sum,num);

 
}
    int sumNumbers(TreeNode* root) {
        int sum=0;
        int num=0;
        solve(root,sum,num);
        return sum;
    }
};

//inorder traversal
#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node* left;
    Node* right;
    Node(int val){
        data = val;
        left = NULL;
        right = NULL;
    }
};

void inOrder(Node* root){
    if(root == NULL)
        return;
    
    inOrder(root->left);
    cout<<root->data<<' ';
    inOrder(root->right);
}
int main(){
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->right->left = new Node(4);
    root->right->right = new Node(5);
    root->right->left->left = new Node(6);

    inOrder(root);

    return 0;
}

//k-th smallest
class Solution {
public:
    int ans;
    TreeNode* f(TreeNode* root,int &k)
    {
        if(root==NULL)
            return NULL;
     TreeNode* l=f(root->left,k);
        k--;
        if(k==0)
        {
            ans=root->val;
            return root;
        }
        TreeNode* r=f(root->right,k);
        return root;
    }
    int kthSmallest(TreeNode* root, int k) {
        ans=root->val;
        TreeNode* r=f(root,k);
        return ans;
    }
};

//preorder traversal
#include <bits/stdc++.h>
using namespace std;

struct Node{
    int data;
    Node* left;
    Node* right;
    Node(int val){
        data = val;
        left = NULL;
        right = NULL;
    }
};

void preOrder(Node* root){
    if(root == NULL)
        return;
    cout<<root->data<<' ';
    preOrder(root->left);
    preOrder(root->right);
}
int main(){
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->right->left = new Node(4);
    root->right->right = new Node(5);
    root->right->left->left = new Node(6);

    preOrder(root);

    return 0;
}

//
