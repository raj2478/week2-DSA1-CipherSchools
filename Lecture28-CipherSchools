/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        return heightOfBT(root)!=-1;
    }

    int heightOfBT(TreeNode *root){
        if(root==NULL)
            return false;
        if(root->left==NULL && root->right==NULL)
            return true;    

        int lh=heightOfBT(root->left);
        if(lh==-1)
            return -1;

        int rh=heightOfBT(root->right);
        if(rh==-1)    
            return -1;

        if(abs(lh-rh)>1)
            return -1;
            
         return max(lh,rh)+1;   
    }
};

class Solution {
public:
	TreeNode* lowestCommonAncestor(TreeNode* curr, TreeNode* p, TreeNode* q) {
		if(!curr || curr==p || curr==q) return curr;
		TreeNode* l=lowestCommonAncestor(curr->left,p,q);
		TreeNode* r=lowestCommonAncestor(curr->right,p,q);
		if(!l) return r;
		else if(!r) return l;
		else return curr;
	}
};

class Solution {
public:
    int dp[20];

    int solve(int n) {
        if(n <= 1) return 1;
        if(dp[n]) return dp[n];
        int ans = 0;
        for(int i=1; i <= n; i++) {
            ans += solve(i-1) * solve(n-i);
        }
        return dp[n] = ans;
    }

    int numTrees(int n) {
        memset(dp, 0, sizeof(dp));
        int ans = solve(n);
        return ans;
    }
};
